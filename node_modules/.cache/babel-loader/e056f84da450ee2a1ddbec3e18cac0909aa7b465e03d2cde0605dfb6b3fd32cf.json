{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/csvclean/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport FileParser from './FileParser';\nimport DataTableDisplay from './DataTableDisplay';\nimport DownloadData from './DownloadData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  // State and functions from the FileParser component\n  const [parsedData, setParsedData] = useState(null);\n  const [selectedColumn, setSelectedColumn] = useState(null);\n  const handleFileUpload = file => {\n    Papa.parse(file, {\n      complete: handleParsingComplete,\n      header: true,\n      skipEmptyLines: true\n    });\n  };\n  const handleParsingComplete = results => {\n    const {\n      data,\n      meta\n    } = results;\n    const columnHeaders = Object.keys(data[0]);\n    setParsedData({\n      columnHeaders,\n      data\n    });\n  };\n  const handleColumnSelection = event => {\n    setSelectedColumn(event.target.value);\n  };\n  const handleTokenizeData = () => {\n    if (!selectedColumn) {\n      alert('Please select a column first.');\n      return;\n    }\n    const tokenizedData = tokenizeData(parsedData.data, selectedColumn);\n    setParsedData({\n      ...parsedData,\n      data: tokenizedData\n    });\n  };\n  const tokenizeData = (data, selectedColumn) => {\n    // Implementation of the tokenizeData function\n    // ... (The previous implementation goes here)\n  };\n\n  // Function to handle downloading the data as a CSV or JSON file\n  const handleDownloadData = (filename, format) => {\n    if (!parsedData || !filename) {\n      return;\n    }\n    let dataToDownload;\n    if (format === 'csv') {\n      // Convert data to CSV format\n      const csvData = Papa.unparse(parsedData.data);\n      dataToDownload = `data:text/csv;charset=utf-8,${encodeURIComponent(csvData)}`;\n    } else if (format === 'json') {\n      // Convert data to JSON format\n      const jsonData = JSON.stringify(parsedData.data, null, 2);\n      dataToDownload = `data:text/json;charset=utf-8,${encodeURIComponent(jsonData)}`;\n    } else {\n      return; // Invalid format, do not proceed with the download\n    }\n\n    // Create a temporary link element to trigger the download\n    const link = document.createElement('a');\n    link.setAttribute('href', dataToDownload);\n    link.setAttribute('download', `${filename}.${format}`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FileParser, {\n      parsedData: parsedData,\n      selectedColumn: selectedColumn,\n      handleFileUpload: handleFileUpload,\n      handleColumnSelection: handleColumnSelection,\n      handleTokenizeData: handleTokenizeData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), parsedData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(DataTableDisplay, {\n        data: parsedData.data,\n        columns: parsedData.columnHeaders\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DownloadData, {\n        onDownload: handleDownloadData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"vAS5HaEQ1r5oPadtDldCRrVO0YE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Papa","FileParser","DataTableDisplay","DownloadData","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","parsedData","setParsedData","selectedColumn","setSelectedColumn","handleFileUpload","file","parse","complete","handleParsingComplete","header","skipEmptyLines","results","data","meta","columnHeaders","Object","keys","handleColumnSelection","event","target","value","handleTokenizeData","alert","tokenizedData","tokenizeData","handleDownloadData","filename","format","dataToDownload","csvData","unparse","encodeURIComponent","jsonData","JSON","stringify","link","document","createElement","setAttribute","body","appendChild","click","removeChild","children","fileName","_jsxFileName","lineNumber","columnNumber","columns","onDownload","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/csvclean/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport FileParser from './FileParser';\nimport DataTableDisplay from './DataTableDisplay';\nimport DownloadData from './DownloadData';\n\nconst App = () => {\n  // State and functions from the FileParser component\n  const [parsedData, setParsedData] = useState(null);\n  const [selectedColumn, setSelectedColumn] = useState(null);\n\n  const handleFileUpload = (file) => {\n    Papa.parse(file, {\n      complete: handleParsingComplete,\n      header: true,\n      skipEmptyLines: true,\n    });\n  };\n\n  const handleParsingComplete = (results) => {\n    const { data, meta } = results;\n    const columnHeaders = Object.keys(data[0]);\n    setParsedData({ columnHeaders, data });\n  };\n\n  const handleColumnSelection = (event) => {\n    setSelectedColumn(event.target.value);\n  };\n\n  const handleTokenizeData = () => {\n    if (!selectedColumn) {\n      alert('Please select a column first.');\n      return;\n    }\n\n    const tokenizedData = tokenizeData(parsedData.data, selectedColumn);\n    setParsedData({ ...parsedData, data: tokenizedData });\n  };\n\n  const tokenizeData = (data, selectedColumn) => {\n    // Implementation of the tokenizeData function\n    // ... (The previous implementation goes here)\n  };\n\n  // Function to handle downloading the data as a CSV or JSON file\n  const handleDownloadData = (filename, format) => {\n    if (!parsedData || !filename) {\n      return;\n    }\n\n    let dataToDownload;\n    if (format === 'csv') {\n      // Convert data to CSV format\n      const csvData = Papa.unparse(parsedData.data);\n      dataToDownload = `data:text/csv;charset=utf-8,${encodeURIComponent(csvData)}`;\n    } else if (format === 'json') {\n      // Convert data to JSON format\n      const jsonData = JSON.stringify(parsedData.data, null, 2);\n      dataToDownload = `data:text/json;charset=utf-8,${encodeURIComponent(jsonData)}`;\n    } else {\n      return; // Invalid format, do not proceed with the download\n    }\n\n    // Create a temporary link element to trigger the download\n    const link = document.createElement('a');\n    link.setAttribute('href', dataToDownload);\n    link.setAttribute('download', `${filename}.${format}`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div>\n      <FileParser\n        parsedData={parsedData}\n        selectedColumn={selectedColumn}\n        handleFileUpload={handleFileUpload}\n        handleColumnSelection={handleColumnSelection}\n        handleTokenizeData={handleTokenizeData}\n      />\n      {parsedData && (\n        <>\n          <DataTableDisplay data={parsedData.data} columns={parsedData.columnHeaders} />\n          <DownloadData onDownload={handleDownloadData} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}