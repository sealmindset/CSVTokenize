{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/csvclean/src/LoadingIndicator.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoadingIndicator = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    let requestId;\n\n    // Function to handle the idle callback\n    const handleIdleCallback = deadline => {\n      if (deadline.timeRemaining() > 0) {\n        setIsLoading(true);\n        requestId = requestIdleCallback(handleIdleCallback);\n      } else {\n        setIsLoading(false);\n        cancelIdleCallback(requestId);\n      }\n    };\n\n    // Initial request for the idle callback\n    requestId = requestIdleCallback(handleIdleCallback);\n\n    // Clean up the idle callback when the component is unmounted\n    return () => {\n      if (requestId) {\n        cancelIdleCallback(requestId);\n      }\n    };\n  }, []);\n  return isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-indicator\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 22\n  }, this) : null;\n};\n_s(LoadingIndicator, \"DlrQjwOD5XS1kcZJvMHoaf7KaZ8=\");\n_c = LoadingIndicator;\nexport default LoadingIndicator;\nvar _c;\n$RefreshReg$(_c, \"LoadingIndicator\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","LoadingIndicator","_s","isLoading","setIsLoading","requestId","handleIdleCallback","deadline","timeRemaining","requestIdleCallback","cancelIdleCallback","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/csvclean/src/LoadingIndicator.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst LoadingIndicator = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    let requestId;\n\n    // Function to handle the idle callback\n    const handleIdleCallback = (deadline) => {\n      if (deadline.timeRemaining() > 0) {\n        setIsLoading(true);\n        requestId = requestIdleCallback(handleIdleCallback);\n      } else {\n        setIsLoading(false);\n        cancelIdleCallback(requestId);\n      }\n    };\n\n    // Initial request for the idle callback\n    requestId = requestIdleCallback(handleIdleCallback);\n\n    // Clean up the idle callback when the component is unmounted\n    return () => {\n      if (requestId) {\n        cancelIdleCallback(requestId);\n      }\n    };\n  }, []);\n\n  return isLoading ? <div className=\"loading-indicator\">Loading...</div> : null;\n};\n\nexport default LoadingIndicator;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EAEjDD,SAAS,CAAC,MAAM;IACd,IAAIQ,SAAS;;IAEb;IACA,MAAMC,kBAAkB,GAAIC,QAAQ,IAAK;MACvC,IAAIA,QAAQ,CAACC,aAAa,CAAC,CAAC,GAAG,CAAC,EAAE;QAChCJ,YAAY,CAAC,IAAI,CAAC;QAClBC,SAAS,GAAGI,mBAAmB,CAACH,kBAAkB,CAAC;MACrD,CAAC,MAAM;QACLF,YAAY,CAAC,KAAK,CAAC;QACnBM,kBAAkB,CAACL,SAAS,CAAC;MAC/B;IACF,CAAC;;IAED;IACAA,SAAS,GAAGI,mBAAmB,CAACH,kBAAkB,CAAC;;IAEnD;IACA,OAAO,MAAM;MACX,IAAID,SAAS,EAAE;QACbK,kBAAkB,CAACL,SAAS,CAAC;MAC/B;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOF,SAAS,gBAAGH,OAAA;IAAKW,SAAS,EAAC,mBAAmB;IAAAC,QAAA,EAAC;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC,GAAG,IAAI;AAC/E,CAAC;AAACd,EAAA,CA7BID,gBAAgB;AAAAgB,EAAA,GAAhBhB,gBAAgB;AA+BtB,eAAeA,gBAAgB;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}