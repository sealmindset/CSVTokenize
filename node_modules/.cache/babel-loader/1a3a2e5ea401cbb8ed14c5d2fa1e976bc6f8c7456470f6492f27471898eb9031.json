{"ast":null,"code":"const tokenizeData = (data, selectedColumn) => {\n  // Create a map to store unique values and their corresponding tokenized versions\n  const uniqueValueMap = {};\n\n  // Helper function to generate tokenized versions of unique data\n  const tokenizeValue = value => {\n    if (!uniqueValueMap[value]) {\n      // If the value has not been tokenized yet, generate a new random tokenized value\n      const tokenizedValue = generateToken(value);\n      uniqueValueMap[value] = tokenizedValue;\n    }\n    return uniqueValueMap[value];\n  };\n\n  // Loop through each row and replace the original data with tokenized data for the selected column\n  const tokenizedData = data.map(row => {\n    const originalData = row[selectedColumn];\n    const tokenizedValue = tokenizeValue(originalData);\n    return {\n      ...row,\n      [selectedColumn]: tokenizedValue\n    };\n  });\n  return tokenizedData;\n};","map":{"version":3,"names":["tokenizeData","data","selectedColumn","uniqueValueMap","tokenizeValue","value","tokenizedValue","generateToken","tokenizedData","map","row","originalData"],"sources":["/Users/robvance/Documents/GitHub/csvclean/src/FileParser.js"],"sourcesContent":["const tokenizeData = (data, selectedColumn) => {\n  // Create a map to store unique values and their corresponding tokenized versions\n  const uniqueValueMap = {};\n\n  // Helper function to generate tokenized versions of unique data\n  const tokenizeValue = (value) => {\n    if (!uniqueValueMap[value]) {\n      // If the value has not been tokenized yet, generate a new random tokenized value\n      const tokenizedValue = generateToken(value);\n      uniqueValueMap[value] = tokenizedValue;\n    }\n    return uniqueValueMap[value];\n  };\n\n  // Loop through each row and replace the original data with tokenized data for the selected column\n  const tokenizedData = data.map((row) => {\n    const originalData = row[selectedColumn];\n    const tokenizedValue = tokenizeValue(originalData);\n\n    return { ...row, [selectedColumn]: tokenizedValue };\n  });\n\n  return tokenizedData;\n};\n\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGA,CAACC,IAAI,EAAEC,cAAc,KAAK;EAC7C;EACA,MAAMC,cAAc,GAAG,CAAC,CAAC;;EAEzB;EACA,MAAMC,aAAa,GAAIC,KAAK,IAAK;IAC/B,IAAI,CAACF,cAAc,CAACE,KAAK,CAAC,EAAE;MAC1B;MACA,MAAMC,cAAc,GAAGC,aAAa,CAACF,KAAK,CAAC;MAC3CF,cAAc,CAACE,KAAK,CAAC,GAAGC,cAAc;IACxC;IACA,OAAOH,cAAc,CAACE,KAAK,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMG,aAAa,GAAGP,IAAI,CAACQ,GAAG,CAAEC,GAAG,IAAK;IACtC,MAAMC,YAAY,GAAGD,GAAG,CAACR,cAAc,CAAC;IACxC,MAAMI,cAAc,GAAGF,aAAa,CAACO,YAAY,CAAC;IAElD,OAAO;MAAE,GAAGD,GAAG;MAAE,CAACR,cAAc,GAAGI;IAAe,CAAC;EACrD,CAAC,CAAC;EAEF,OAAOE,aAAa;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}