{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/csvclean/src/FileParser.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport DataTableDisplay from './DataTableDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FileParser = () => {\n  _s();\n  const [parsedData, setParsedData] = useState(null);\n  const [selectedColumn, setSelectedColumn] = useState(null);\n  const handleFileUpload = file => {\n    Papa.parse(file, {\n      complete: handleParsingComplete,\n      header: true,\n      skipEmptyLines: true\n    });\n  };\n  const handleParsingComplete = results => {\n    const {\n      data,\n      meta\n    } = results;\n    const columnHeaders = Object.keys(data[0]);\n    setParsedData({\n      columnHeaders,\n      data\n    });\n  };\n  const handleColumnSelection = event => {\n    setSelectedColumn(event.target.value);\n  };\n  const handleTokenizeData = () => {\n    if (!selectedColumn) {\n      alert('Please select a column first.');\n      return;\n    }\n    const tokenizedData = tokenizeData(parsedData.data, selectedColumn);\n    setParsedData({\n      ...parsedData,\n      data: tokenizedData\n    });\n  };\n  const tokenizeData = (data, selectedColumn) => {\n    const tokenMap = {}; // Map unique values to their tokenized versions\n\n    // Loop through each row and create the token map for the selected column\n    data.forEach(row => {\n      const uniqueValue = row[selectedColumn];\n      if (!tokenMap[uniqueValue]) {\n        tokenMap[uniqueValue] = generateToken(uniqueValue);\n      }\n    });\n\n    // Loop through each row and replace the unique value with the tokenized value\n    const tokenizedData = data.map(row => {\n      const uniqueValue = row[selectedColumn];\n      const tokenizedValue = tokenMap[uniqueValue];\n      return {\n        ...row,\n        [selectedColumn]: tokenizedValue\n      };\n    });\n    return tokenizedData;\n  };\n  const generateToken = value => {\n    // Your custom tokenization logic goes here\n    // Replace this implementation with the more sophisticated tokenization algorithm from the previous response\n\n    // For illustration purposes, we'll simply replace each character with \"x\"\n    return 'x'.repeat(value.length);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: e => handleFileUpload(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), parsedData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a Column:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedColumn,\n          onChange: handleColumnSelection,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"--Select Column--\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), parsedData.columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: header,\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTokenizeData,\n          disabled: !selectedColumn,\n          children: \"Tokenize Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DataTableDisplay, {\n        data: parsedData.data,\n        columns: parsedData.columnHeaders\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(FileParser, \"vAS5HaEQ1r5oPadtDldCRrVO0YE=\");\n_c = FileParser;\nexport default FileParser;\nvar _c;\n$RefreshReg$(_c, \"FileParser\");","map":{"version":3,"names":["React","useState","Papa","DataTableDisplay","jsxDEV","_jsxDEV","Fragment","_Fragment","FileParser","_s","parsedData","setParsedData","selectedColumn","setSelectedColumn","handleFileUpload","file","parse","complete","handleParsingComplete","header","skipEmptyLines","results","data","meta","columnHeaders","Object","keys","handleColumnSelection","event","target","value","handleTokenizeData","alert","tokenizedData","tokenizeData","tokenMap","forEach","row","uniqueValue","generateToken","map","tokenizedValue","repeat","length","children","type","accept","onChange","e","files","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","columns","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/csvclean/src/FileParser.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport DataTableDisplay from './DataTableDisplay';\n\nconst FileParser = () => {\n  const [parsedData, setParsedData] = useState(null);\n  const [selectedColumn, setSelectedColumn] = useState(null);\n\n  const handleFileUpload = (file) => {\n    Papa.parse(file, {\n      complete: handleParsingComplete,\n      header: true,\n      skipEmptyLines: true,\n    });\n  };\n\n  const handleParsingComplete = (results) => {\n    const { data, meta } = results;\n    const columnHeaders = Object.keys(data[0]);\n    setParsedData({ columnHeaders, data });\n  };\n\n  const handleColumnSelection = (event) => {\n    setSelectedColumn(event.target.value);\n  };\n\n  const handleTokenizeData = () => {\n    if (!selectedColumn) {\n      alert('Please select a column first.');\n      return;\n    }\n\n    const tokenizedData = tokenizeData(parsedData.data, selectedColumn);\n    setParsedData({ ...parsedData, data: tokenizedData });\n  };\n\n  const tokenizeData = (data, selectedColumn) => {\n    const tokenMap = {}; // Map unique values to their tokenized versions\n\n    // Loop through each row and create the token map for the selected column\n    data.forEach((row) => {\n      const uniqueValue = row[selectedColumn];\n      if (!tokenMap[uniqueValue]) {\n        tokenMap[uniqueValue] = generateToken(uniqueValue);\n      }\n    });\n\n    // Loop through each row and replace the unique value with the tokenized value\n    const tokenizedData = data.map((row) => {\n      const uniqueValue = row[selectedColumn];\n      const tokenizedValue = tokenMap[uniqueValue];\n      return { ...row, [selectedColumn]: tokenizedValue };\n    });\n\n    return tokenizedData;\n  };\n\n  const generateToken = (value) => {\n    // Your custom tokenization logic goes here\n    // Replace this implementation with the more sophisticated tokenization algorithm from the previous response\n\n    // For illustration purposes, we'll simply replace each character with \"x\"\n    return 'x'.repeat(value.length);\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\".csv\" onChange={(e) => handleFileUpload(e.target.files[0])} />\n      {parsedData && (\n        <>\n          <div>\n            <h3>Select a Column:</h3>\n            <select value={selectedColumn} onChange={handleColumnSelection}>\n              <option value=\"\">--Select Column--</option>\n              {parsedData.columnHeaders.map((header) => (\n                <option key={header} value={header}>\n                  {header}\n                </option>\n              ))}\n            </select>\n            <button onClick={handleTokenizeData} disabled={!selectedColumn}>\n              Tokenize Data\n            </button>\n          </div>\n          <DataTableDisplay data={parsedData.data} columns={parsedData.columnHeaders} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default FileParser;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}