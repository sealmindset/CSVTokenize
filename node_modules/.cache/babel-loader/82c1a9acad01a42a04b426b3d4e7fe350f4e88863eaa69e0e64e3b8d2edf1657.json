{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport Papa from 'papaparse';\nconst flattenProperties = (data, prefix = '') => {\n  const flattenedData = {};\n  const flattenObject = (obj, parentKey = '') => {\n    for (const key in obj) {\n      const value = obj[key];\n      const newKey = parentKey ? `${parentKey}_${key}` : key;\n      if (typeof value === 'object' && value !== null) {\n        // Recursively flatten nested objects\n        flattenObject(value, newKey);\n      } else {\n        flattenedData[newKey] = value;\n      }\n    }\n  };\n  try {\n    const parsedData = JSON.parse(data);\n    flattenObject(parsedData, prefix);\n  } catch (error) {\n    // Treat the data as a simple key-value pair\n    const [key, value] = data.split(':').map(item => item.trim());\n    const newKey = prefix ? `${prefix}_${key}` : key;\n    flattenedData[newKey] = value;\n  }\n  return flattenedData;\n};\nconst mergeRow = (flattenedProperties, originalRow) => {\n  const newRow = {\n    ...originalRow\n  };\n\n  // Check if the PROPERTIES column exists in the originalRow and is a valid JSON string\n  if (originalRow.hasOwnProperty('PROPERTIES')) {\n    try {\n      const properties = JSON.parse(originalRow.PROPERTIES);\n      if (typeof properties === 'object' && properties !== null) {\n        // Merge properties object with newRow, handling nested objects\n        const mergeObjects = (obj, parentKey = '') => {\n          for (const key in obj) {\n            const value = obj[key];\n            const newKey = parentKey ? `${parentKey}_${key}` : key;\n            if (typeof value === 'object' && value !== null) {\n              mergeObjects(value, newKey);\n            } else {\n              newRow[newKey] = value;\n            }\n          }\n        };\n        mergeObjects(properties);\n      }\n    } catch (error) {\n      console.warn('Error parsing PROPERTIES column:', error);\n    }\n  }\n\n  // Merge flattenedProperties into newRow\n  for (const key in flattenedProperties) {\n    newRow[key] = flattenedProperties[key];\n  }\n  return newRow;\n};\nexport const useCSVProcessor = () => {\n  _s();\n  const [processedData, setProcessedData] = useState(null);\n  const processCSV = async (inputFile, onDownload) => {\n    if (!inputFile) return;\n    const reader = new FileReader();\n    reader.onload = async e => {\n      const csvData = e.target.result;\n      const rows = Papa.parse(csvData, {\n        header: true\n      }).data;\n      const uniqueRows = new Set();\n      const outputRows = [];\n      for (const row of rows) {\n        const properties = row.PROPERTIES;\n        const flattenedProperties = flattenProperties(properties);\n        const newRow = mergeRow(flattenedProperties, row);\n        delete newRow.PROPERTIES;\n        const rowString = JSON.stringify(newRow);\n        if (!uniqueRows.has(rowString)) {\n          uniqueRows.add(rowString);\n          outputRows.push(newRow);\n        }\n      }\n      const csvOutput = Papa.unparse(outputRows);\n      setProcessedData(csvOutput);\n      onDownload(csvOutput); // Pass the processed data to the parent component\n    };\n\n    reader.readAsText(inputFile);\n  };\n  return {\n    processedData,\n    processCSV\n  };\n};\n_s(useCSVProcessor, \"Pel2eZL7ivq1XOJ8lIRw/8WIIB0=\");","map":{"version":3,"names":["useState","Papa","flattenProperties","data","prefix","flattenedData","flattenObject","obj","parentKey","key","value","newKey","parsedData","JSON","parse","error","split","map","item","trim","mergeRow","flattenedProperties","originalRow","newRow","hasOwnProperty","properties","PROPERTIES","mergeObjects","console","warn","useCSVProcessor","_s","processedData","setProcessedData","processCSV","inputFile","onDownload","reader","FileReader","onload","e","csvData","target","result","rows","header","uniqueRows","Set","outputRows","row","rowString","stringify","has","add","push","csvOutput","unparse","readAsText"],"sources":["/Users/robvance/Documents/GitHub/csvclean/src/useCSVProcessor.js"],"sourcesContent":["import { useState } from 'react';\nimport Papa from 'papaparse';\n\nconst flattenProperties = (data, prefix = '') => {\n  const flattenedData = {};\n\n  const flattenObject = (obj, parentKey = '') => {\n    for (const key in obj) {\n      const value = obj[key];\n      const newKey = parentKey ? `${parentKey}_${key}` : key;\n\n      if (typeof value === 'object' && value !== null) {\n        // Recursively flatten nested objects\n        flattenObject(value, newKey);\n      } else {\n        flattenedData[newKey] = value;\n      }\n    }\n  };\n\n  try {\n    const parsedData = JSON.parse(data);\n    flattenObject(parsedData, prefix);\n  } catch (error) {\n    // Treat the data as a simple key-value pair\n    const [key, value] = data.split(':').map((item) => item.trim());\n    const newKey = prefix ? `${prefix}_${key}` : key;\n    flattenedData[newKey] = value;\n  }\n\n  return flattenedData;\n};\n\nconst mergeRow = (flattenedProperties, originalRow) => {\n  const newRow = { ...originalRow };\n\n  // Check if the PROPERTIES column exists in the originalRow and is a valid JSON string\n  if (originalRow.hasOwnProperty('PROPERTIES')) {\n    try {\n      const properties = JSON.parse(originalRow.PROPERTIES);\n      if (typeof properties === 'object' && properties !== null) {\n        // Merge properties object with newRow, handling nested objects\n        const mergeObjects = (obj, parentKey = '') => {\n          for (const key in obj) {\n            const value = obj[key];\n            const newKey = parentKey ? `${parentKey}_${key}` : key;\n\n            if (typeof value === 'object' && value !== null) {\n              mergeObjects(value, newKey);\n            } else {\n              newRow[newKey] = value;\n            }\n          }\n        };\n        mergeObjects(properties);\n      }\n    } catch (error) {\n      console.warn('Error parsing PROPERTIES column:', error);\n    }\n  }\n\n  // Merge flattenedProperties into newRow\n  for (const key in flattenedProperties) {\n    newRow[key] = flattenedProperties[key];\n  }\n\n  return newRow;\n};\n\nexport const useCSVProcessor = () => {\n  const [processedData, setProcessedData] = useState(null);\n\n  const processCSV = async (inputFile, onDownload) => {\n    if (!inputFile) return;\n\n    const reader = new FileReader();\n    reader.onload = async (e) => {\n      const csvData = e.target.result;\n      const rows = Papa.parse(csvData, { header: true }).data;\n\n      const uniqueRows = new Set();\n      const outputRows = [];\n\n      for (const row of rows) {\n        const properties = row.PROPERTIES;\n        const flattenedProperties = flattenProperties(properties);\n\n        const newRow = mergeRow(flattenedProperties, row);\n\n        delete newRow.PROPERTIES;\n\n        const rowString = JSON.stringify(newRow);\n        if (!uniqueRows.has(rowString)) {\n          uniqueRows.add(rowString);\n          outputRows.push(newRow);\n        }\n      }\n\n      const csvOutput = Papa.unparse(outputRows);\n      setProcessedData(csvOutput);\n      onDownload(csvOutput); // Pass the processed data to the parent component\n    };\n\n    reader.readAsText(inputFile);\n  };\n\n  return { processedData, processCSV };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}