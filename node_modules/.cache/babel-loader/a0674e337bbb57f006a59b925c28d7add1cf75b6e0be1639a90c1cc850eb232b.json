{"ast":null,"code":"var _jsxFileName = \"/Users/robvance/Documents/GitHub/csvclean/src/FileParser.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport DataTableDisplay from './DataTableDisplay';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FileParser = () => {\n  _s();\n  const [parsedData, setParsedData] = useState(null);\n  const [selectedColumn, setSelectedColumn] = useState(null);\n  const handleFileUpload = file => {\n    Papa.parse(file, {\n      complete: handleParsingComplete,\n      header: true,\n      skipEmptyLines: true\n    });\n  };\n  const handleParsingComplete = results => {\n    const {\n      data,\n      meta\n    } = results;\n    const columnHeaders = Object.keys(data[0]);\n    setParsedData({\n      columnHeaders,\n      data\n    });\n  };\n  const handleColumnSelection = event => {\n    setSelectedColumn(event.target.value);\n  };\n  const handleTokenizeData = () => {\n    if (!selectedColumn) {\n      alert('Please select a column first.');\n      return;\n    }\n    const tokenizedData = tokenizeData(parsedData.data, selectedColumn);\n    setParsedData({\n      ...parsedData,\n      data: tokenizedData\n    });\n  };\n  const tokenizeData = (data, selectedColumn) => {\n    // Create a map to store unique values and their corresponding tokenized versions\n    const uniqueValueMap = {};\n\n    // Helper function to generate tokenized versions of unique data\n    const generateToken = data => {\n      // Your custom tokenization logic goes here\n      // For example, you can use a more sophisticated algorithm to obfuscate the data\n      const charMap = {};\n      const tokenizedValue = data.split('').map(char => {\n        if (!charMap[char]) {\n          charMap[char] = generateRandomChar(char);\n        }\n        return charMap[char];\n      }).join('');\n      return tokenizedValue;\n    };\n\n    // Step 1: Identify unique values in the selected column and store their tokenized versions\n    const uniqueValuesInSelectedColumn = new Set(data.map(row => row[selectedColumn]));\n    for (const value of uniqueValuesInSelectedColumn) {\n      if (!uniqueValueMap[value]) {\n        uniqueValueMap[value] = generateToken(value);\n      }\n    }\n\n    // Step 2: Tokenize relevant values in each column\n    const tokenizedData = data.map(row => {\n      const tokenizedRow = {\n        ...row\n      };\n      for (const [column, value] of Object.entries(row)) {\n        if (column === selectedColumn && typeof value === 'string') {\n          // Tokenize the value in the selected column\n          tokenizedRow[column] = uniqueValueMap[value];\n        } else if (column !== selectedColumn && typeof value === 'string') {\n          // Check if the value contains any of the unique values in the selected column\n          for (const uniqueValue of uniqueValuesInSelectedColumn) {\n            if (value.includes(uniqueValue)) {\n              // Tokenize the value in this column\n              const tokenizedValue = value.replace(new RegExp(uniqueValue, 'g'), uniqueValueMap[uniqueValue]);\n              tokenizedRow[column] = tokenizedValue;\n            }\n          }\n        }\n      }\n      return tokenizedRow;\n    });\n    return tokenizedData;\n  };\n  const generateRandomChar = char => {\n    if (/[A-Z]/.test(char)) {\n      return String.fromCharCode(Math.floor(Math.random() * 26) + 65); // Uppercase letter\n    } else if (/[a-z]/.test(char)) {\n      return String.fromCharCode(Math.floor(Math.random() * 26) + 97); // Lowercase letter\n    } else if (/\\d/.test(char)) {\n      return String.fromCharCode(Math.floor(Math.random() * 10) + 48); // Digit\n    }\n\n    return char; // Non-alphanumeric characters remain the same\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".csv\",\n      onChange: e => handleFileUpload(e.target.files[0])\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), parsedData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Select a Column:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedColumn,\n          onChange: handleColumnSelection,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            children: \"--Select Column--\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), parsedData.columnHeaders.map(header => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: header,\n            children: header\n          }, header, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTokenizeData,\n          disabled: !selectedColumn,\n          children: \"Tokenize Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DataTableDisplay, {\n        data: parsedData.data,\n        columns: parsedData.columnHeaders\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(FileParser, \"vAS5HaEQ1r5oPadtDldCRrVO0YE=\");\n_c = FileParser;\nexport default FileParser;\nvar _c;\n$RefreshReg$(_c, \"FileParser\");","map":{"version":3,"names":["React","useState","Papa","DataTableDisplay","jsxDEV","_jsxDEV","Fragment","_Fragment","FileParser","_s","parsedData","setParsedData","selectedColumn","setSelectedColumn","handleFileUpload","file","parse","complete","handleParsingComplete","header","skipEmptyLines","results","data","meta","columnHeaders","Object","keys","handleColumnSelection","event","target","value","handleTokenizeData","alert","tokenizedData","tokenizeData","uniqueValueMap","generateToken","charMap","tokenizedValue","split","map","char","generateRandomChar","join","uniqueValuesInSelectedColumn","Set","row","tokenizedRow","column","entries","uniqueValue","includes","replace","RegExp","test","String","fromCharCode","Math","floor","random","children","type","accept","onChange","e","files","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","columns","_c","$RefreshReg$"],"sources":["/Users/robvance/Documents/GitHub/csvclean/src/FileParser.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport DataTableDisplay from './DataTableDisplay';\n\nconst FileParser = () => {\n  const [parsedData, setParsedData] = useState(null);\n  const [selectedColumn, setSelectedColumn] = useState(null);\n\n  const handleFileUpload = (file) => {\n    Papa.parse(file, {\n      complete: handleParsingComplete,\n      header: true,\n      skipEmptyLines: true,\n    });\n  };\n\n  const handleParsingComplete = (results) => {\n    const { data, meta } = results;\n    const columnHeaders = Object.keys(data[0]);\n    setParsedData({ columnHeaders, data });\n  };\n\n  const handleColumnSelection = (event) => {\n    setSelectedColumn(event.target.value);\n  };\n\n  const handleTokenizeData = () => {\n    if (!selectedColumn) {\n      alert('Please select a column first.');\n      return;\n    }\n\n    const tokenizedData = tokenizeData(parsedData.data, selectedColumn);\n    setParsedData({ ...parsedData, data: tokenizedData });\n  };\n\n  const tokenizeData = (data, selectedColumn) => {\n    // Create a map to store unique values and their corresponding tokenized versions\n    const uniqueValueMap = {};\n\n    // Helper function to generate tokenized versions of unique data\n    const generateToken = (data) => {\n      // Your custom tokenization logic goes here\n      // For example, you can use a more sophisticated algorithm to obfuscate the data\n      const charMap = {};\n      const tokenizedValue = data\n        .split('')\n        .map((char) => {\n          if (!charMap[char]) {\n            charMap[char] = generateRandomChar(char);\n          }\n          return charMap[char];\n        })\n        .join('');\n      return tokenizedValue;\n    };\n\n    // Step 1: Identify unique values in the selected column and store their tokenized versions\n    const uniqueValuesInSelectedColumn = new Set(data.map((row) => row[selectedColumn]));\n    for (const value of uniqueValuesInSelectedColumn) {\n      if (!uniqueValueMap[value]) {\n        uniqueValueMap[value] = generateToken(value);\n      }\n    }\n\n    // Step 2: Tokenize relevant values in each column\n    const tokenizedData = data.map((row) => {\n      const tokenizedRow = { ...row };\n\n      for (const [column, value] of Object.entries(row)) {\n        if (column === selectedColumn && typeof value === 'string') {\n          // Tokenize the value in the selected column\n          tokenizedRow[column] = uniqueValueMap[value];\n        } else if (column !== selectedColumn && typeof value === 'string') {\n          // Check if the value contains any of the unique values in the selected column\n          for (const uniqueValue of uniqueValuesInSelectedColumn) {\n            if (value.includes(uniqueValue)) {\n              // Tokenize the value in this column\n              const tokenizedValue = value.replace(new RegExp(uniqueValue, 'g'), uniqueValueMap[uniqueValue]);\n              tokenizedRow[column] = tokenizedValue;\n            }\n          }\n        }\n      }\n\n      return tokenizedRow;\n    });\n\n    return tokenizedData;\n  };\n\n  const generateRandomChar = (char) => {\n    if (/[A-Z]/.test(char)) {\n      return String.fromCharCode(Math.floor(Math.random() * 26) + 65); // Uppercase letter\n    } else if (/[a-z]/.test(char)) {\n      return String.fromCharCode(Math.floor(Math.random() * 26) + 97); // Lowercase letter\n    } else if (/\\d/.test(char)) {\n      return String.fromCharCode(Math.floor(Math.random() * 10) + 48); // Digit\n    }\n    return char; // Non-alphanumeric characters remain the same\n  };\n\n  return (\n    <div>\n      <input type=\"file\" accept=\".csv\" onChange={(e) => handleFileUpload(e.target.files[0])} />\n      {parsedData && (\n        <>\n          <div>\n            <h3>Select a Column:</h3>\n            <select value={selectedColumn} onChange={handleColumnSelection}>\n              <option value=\"\">--Select Column--</option>\n              {parsedData.columnHeaders.map((header) => (\n                <option key={header} value={header}>\n                  {header}\n                </option>\n              ))}\n            </select>\n            <button onClick={handleTokenizeData} disabled={!selectedColumn}>\n              Tokenize Data\n            </button>\n          </div>\n          <DataTableDisplay data={parsedData.data} columns={parsedData.columnHeaders} />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default FileParser;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}