/Users/robvance/Documents/GitHub/csvclean/src/App.js
import React, { useState } from 'react';
import Papa from 'papaparse';
import FileParser from './FileParser';
import DataTableDisplay from './DataTableDisplay';
import DownloadData from './DownloadData';
import LoadingIndicator from './LoadingIndicator';

const App = () => {
  const [parsedData, setParsedData] = useState(null);
  const [selectedColumn, setSelectedColumn] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);

  const handleFileUpload = (file) => {
    Papa.parse(file, {
      complete: handleParsingComplete,
      header: true,
      skipEmptyLines: true,
    });
  };

  const handleParsingComplete = (results) => {
    const { data } = results;
    const columnHeaders = Object.keys(data[0]);
    setParsedData({ columnHeaders, data });
  };

  const handleColumnSelection = (event) => {
    setSelectedColumn(event.target.value);
  };

  const handleTokenizeData = () => {
    if (!selectedColumn) {
      alert('Please select a column first.');
      return;
    }

    setIsProcessing(true);
    const tokenizedData = tokenizeData(parsedData.data, selectedColumn);
    setIsProcessing(false);
    setParsedData({ ...parsedData, data: tokenizedData });
  };

  const tokenizeData = (data, selectedColumn) => {
    // Implementation of the tokenizeData function
    // ... (The previous implementation goes here)
  };

  const handleDownloadData = (filename, format) => {
    if (!parsedData || !filename) {
      return;
    }

    let dataToDownload;
    if (format === 'csv') {
      const csvData = Papa.unparse(parsedData.data);
      dataToDownload = `data:text/csv;charset=utf-8,${encodeURIComponent(csvData)}`;
    } else if (format === 'json') {
      const jsonData = JSON.stringify(parsedData.data, null, 2);
      dataToDownload = `data:text/json;charset=utf-8,${encodeURIComponent(jsonData)}`;
    } else {
      return;
    }

    const link = document.createElement('a');
    link.setAttribute('href', dataToDownload);
    link.setAttribute('download', `${filename}.${format}`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4">
      {/* Section 1: Title */}
      <div className="col-span-1 md:col-span-2 lg:col-span-3 border-b-2 border-gray-300">
        <h1 className="text-4xl font-bold mb-4">CSV Data Cleaner</h1>
      </div>

      {/* Section 2: Menu */}
      <div className="col-span-1 md:col-span-1 lg:col-span-1 border-b-2 border-gray-300">
        {/* Your menu content goes here */}
      </div>

      {/* Section 3: Dropzone */}
      <div className="col-span-1 md:col-span-1 lg:col-span-1 border-b-2 border-gray-300">
        <FileParser
          parsedData={parsedData}
          selectedColumn={selectedColumn}
          handleFileUpload={handleFileUpload}
          handleColumnSelection={handleColumnSelection}
          handleTokenizeData={handleTokenizeData}
        />
      </div>

      {/* Section 4: Tokenize */}
      <div className="col-span-1 md:col-span-1 lg:col-span-1 border-b-2 border-gray-300">
        {/* Your toggle section content goes here */}
      </div>

      {/* Section 6: Table */}
      <div className="col-span-1 md:col-span-2 lg:col-span-2 border-b-2 border-gray-300">
        {parsedData && (
          <DataTableDisplay data={parsedData.data} columns={parsedData.columnHeaders} />
        )}
      </div>

      {/* Section 7: Download */}
      <div className="col-span-1 md:col-span-1 lg:col-span-1">
        {parsedData && <DownloadData onDownload={handleDownloadData} />}
        {isProcessing && <LoadingIndicator isProcessing={isProcessing} />}
      </div>
    </div>
  );
};

export default App;
/Users/robvance/Documents/GitHub/csvclean/src/App.css
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/Users/robvance/Documents/GitHub/csvclean/src/DataTableDisplay.js
import React, { useState, useCallback } from 'react';
import DataTable from 'react-data-table-component';
import Modal from './Modal';

const DataTableDisplay = ({ data, columns }) => {
  const [selectedRow, setSelectedRow] = useState(null);

  const handleRowClick = useCallback((row) => {
    setSelectedRow(row);
  }, []);

  const handleCloseModal = useCallback(() => {
    setSelectedRow(null);
  }, []);

  const wrapText = (text, maxWidth) => {
    if (!text) return '';

    if (text.length <= maxWidth) return text;

    return text.slice(0, maxWidth) + '...';
  };

  const tableColumns = columns.map((header) => ({
    name: header,
    selector: header,
    sortable: true,
    cell: (row) => {
      const wrappedText = wrapText(row[header], 250);
      return (
        <div
          className="max-h-16 overflow-y-auto whitespace-wrap cursor-pointer"
          style={{ maxWidth: '250px' }}
          onClick={() => handleRowClick(row)}
        >
          {wrappedText}
        </div>
      );
    },
  }));

  const ExpandableRow = () => {
    return (
      <div>
        {selectedRow &&
          Object.entries(selectedRow).map(([header, value]) => (
            <p key={header}>
              <strong>{header}:</strong> {value}
            </p>
          ))}
      </div>
    );
  };

  return (
    <div className="px-4 py-6">
      <h2 className="text-2xl font-bold mb-4">Processed Data</h2>
      <div className="max-w-full overflow-x-auto">
        <DataTable
          columns={tableColumns}
          data={data}
          pagination
          paginationPerPage={10}
          paginationRowsPerPageOptions={[10, 20, 50, 100]}
          noDataComponent={<span className="text-red-500">No data found</span>}
          expandableRows
          expandableRowsComponent={<ExpandableRow />}
          expandOnRowClicked
        />
      </div>

      {selectedRow && (
        <Modal onClose={handleCloseModal}>
          <div className="modal-content">
            <h3 className="text-lg font-semibold mb-2">Row Details</h3>
            <table>
              <tbody>
                {Object.entries(selectedRow).map(([header, value]) => (
                  <tr key={header}>
                    <td className="font-semibold pr-2">{header}</td>
                    <td>{value}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </Modal>
      )}
    </div>
  );
};

export default DataTableDisplay;


/Users/robvance/Documents/GitHub/csvclean/src/DownloadData.js
import React, { useState } from 'react';
import './DownloadData.css';

const DownloadData = ({ onDownload }) => {
  const [filename, setFilename] = useState('');

  const handleFilenameChange = (event) => {
    setFilename(event.target.value);
  };

  const handleDownload = (format) => {
    if (!filename) {
      alert('Please enter a filename.');
      return;
    }

    onDownload(filename, format);
    setFilename('');
  };

  return (
    <div className="download-data">
      <h3>Download Data</h3>
      <div>
        <input
          type="text"
          value={filename}
          onChange={handleFilenameChange}
          placeholder="Enter a filename"
        />
        <button onClick={() => handleDownload('csv')} disabled={!filename}>
          Download CSV
        </button>
        <button onClick={() => handleDownload('json')} disabled={!filename}>
          Download JSON
        </button>
      </div>
    </div>
  );
};

export default DownloadData;


/Users/robvance/Documents/GitHub/csvclean/src/DownloadData.css
.download-data {
  margin-top: 20px;
}

.download-data h3 {
  margin-bottom: 10px;
}

.download-data input {
  margin-right: 10px;
}

.download-data button {
  margin-right: 10px;
}


/Users/robvance/Documents/GitHub/csvclean/src/FileParser.js
import React, { useState } from 'react';
import Papa from 'papaparse';
import DataTableDisplay from './DataTableDisplay';
import DownloadData from './DownloadData';
import LoadingIndicator from './LoadingIndicator';

const FileParser = () => {
  const [parsedData, setParsedData] = useState(null);
  const [selectedColumn, setSelectedColumn] = useState(null);
  const [isProcessing, setIsProcessing] = useState(false);

  const handleFileUpload = (file) => {
    Papa.parse(file, {
      complete: handleParsingComplete,
      header: true,
      skipEmptyLines: true,
    });
  };

  const handleParsingComplete = (results) => {
    const { data } = results;
    const columnHeaders = Object.keys(data[0]);
    setParsedData({ columnHeaders, data });
  };

  const handleColumnSelection = (event) => {
    setSelectedColumn(event.target.value);
  };

  const handleTokenizeData = () => {
    if (!selectedColumn) {
      alert('Please select a column first.');
      return;
    }

    setIsProcessing(true);
    const tokenizedData = tokenizeData(parsedData.data, selectedColumn);
    setIsProcessing(false);
    setParsedData({ ...parsedData, data: tokenizedData });
  };

  const tokenizeData = (data, selectedColumn) => {
    // Create a map to store unique values and their corresponding tokenized versions
    const uniqueValueMap = {};

    // Helper function to generate tokenized versions of unique data
    const generateToken = (data) => {
      // Your custom tokenization logic goes here
      // For example, you can use a more sophisticated algorithm to obfuscate the data
      const charMap = {};
      const tokenizedValue = data
        .split('')
        .map((char) => {
          if (!charMap[char]) {
            charMap[char] = generateRandomChar(char);
          }
          return charMap[char];
        })
        .join('');
      return tokenizedValue;
    };

    // Step 1: Identify unique values in the selected column and store their tokenized versions
    const uniqueValuesInSelectedColumn = new Set(data.map((row) => row[selectedColumn]));
    for (const value of uniqueValuesInSelectedColumn) {
      if (!uniqueValueMap[value]) {
        uniqueValueMap[value] = generateToken(value);
      }
    }

    // Step 2: Tokenize relevant values in each column
    const tokenizedData = data.map((row) => {
      const tokenizedRow = { ...row };

      for (const [column, value] of Object.entries(row)) {
        if (column === selectedColumn && typeof value === 'string') {
          // Tokenize the value in the selected column
          tokenizedRow[column] = uniqueValueMap[value];
        } else if (column !== selectedColumn && typeof value === 'string') {
          // Check if the value contains any of the unique values in the selected column
          for (const uniqueValue of uniqueValuesInSelectedColumn) {
            if (value.includes(uniqueValue)) {
              // Tokenize the value in this column
              const tokenizedValue = value.replace(new RegExp(uniqueValue, 'g'), uniqueValueMap[uniqueValue]);
              tokenizedRow[column] = tokenizedValue;
            }
          }
        }
      }

      return tokenizedRow;
    });

    return tokenizedData;
  };

  const generateRandomChar = (char) => {
    if (/[A-Z]/.test(char)) {
      return String.fromCharCode(Math.floor(Math.random() * 26) + 65); // Uppercase letter
    } else if (/[a-z]/.test(char)) {
      return String.fromCharCode(Math.floor(Math.random() * 26) + 97); // Lowercase letter
    } else if (/\d/.test(char)) {
      return String.fromCharCode(Math.floor(Math.random() * 10) + 48); // Digit
    }
    return char; // Non-alphanumeric characters remain the same
  };

  // Function to handle downloading the data as a CSV or JSON file
  const handleDownloadData = (filename, format) => {
    if (!parsedData || !filename) {
      return;
    }

    let dataToDownload;
    if (format === 'csv') {
      // Convert data to CSV format
      const csvData = Papa.unparse(parsedData.data);
      dataToDownload = `data:text/csv;charset=utf-8,${encodeURIComponent(csvData)}`;
    } else if (format === 'json') {
      // Convert data to JSON format
      const jsonData = JSON.stringify(parsedData.data, null, 2);
      dataToDownload = `data:text/json;charset=utf-8,${encodeURIComponent(jsonData)}`;
    } else {
      return; // Invalid format, do not proceed with the download
    }

    // Create a temporary link element to trigger the download
    const link = document.createElement('a');
    link.setAttribute('href', dataToDownload);
    link.setAttribute('download', `${filename}.${format}`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div>
      <input type="file" accept=".csv" onChange={(e) => handleFileUpload(e.target.files[0])} />
      {parsedData && (
        <>
          <div>
            <h3>Select a Column:</h3>
            <select value={selectedColumn} onChange={handleColumnSelection}>
              <option value="">--Select Column--</option>
              {parsedData.columnHeaders.map((header) => (
                <option key={header} value={header}>
                  {header}
                </option>
              ))}
            </select>
            <button onClick={handleTokenizeData} disabled={!selectedColumn}>
              {isProcessing ? 'Processing...' : 'Tokenize Data'}
            </button>
          </div>
          <DataTableDisplay data={parsedData.data} columns={parsedData.columnHeaders} />
          <DownloadData onDownload={handleDownloadData} />
          <LoadingIndicator isProcessing={isProcessing} />
        </>
      )}
    </div>
  );
};

export default FileParser;


/Users/robvance/Documents/GitHub/csvclean/src/LoadingIndicator.js
import React from 'react';

const LoadingIndicator = ({ isProcessing }) => {
  return isProcessing ? <div className="loading-indicator">Processing...</div> : null;
};

export default LoadingIndicator;


/Users/robvance/Documents/GitHub/csvclean/src/LoadingIndicator.css
.loading-indicator {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  z-index: 9999;
}

.spinner {
  border: 4px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top: 4px solid #ffffff;
  width: 50px;
  height: 50px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

.loading-indicator p {
  margin-top: 10px;
  color: #ffffff;
  font-weight: bold;
}


/Users/robvance/Documents/GitHub/csvclean/src/Modal.js
import React from 'react';
import ReactDOM from 'react-dom';

const Modal = ({ children, onClose }) => {
  const modalRoot = document.getElementById('modal-root');

  return ReactDOM.createPortal(
    <div className="modal-overlay">
      <div className="modal-container">
        {children}
        <button className="modal-close-button" onClick={onClose}>Close</button>
      </div>
    </div>,
    modalRoot
  );
};

export default Modal;


/Users/robvance/Documents/GitHub/csvclean/src/Modal.css
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.modal-container {
  background-color: #ffffff;
  padding: 20px;
  border-radius: 5px;
  box-shadow: 0px 2px 8px rgba(0, 0, 0, 0.15);
}

.modal-content table {
  width: 100%;
  border-collapse: collapse;
  margin-bottom: 10px;
}

.modal-content table th,
.modal-content table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
}

.modal-content h3 {
  margin-bottom: 10px;
}

.modal-content button {
  background-color: #333;
  color: #fff;
  border: none;
  padding: 8px 16px;
  border-radius: 5px;
  cursor: pointer;
}

.modal-content button:hover {
  background-color: #555;
}


